- id: '1688111538910'
  alias: Litière Intelligente - Incrementer passages litière
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.capteur_mouvement_litiere
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_cat_litter_box
    state: 'on'
  action:
  - service: input_number.increment
    data: {}
    target:
      entity_id: input_number.litter_tracking
  mode: single
- id: '1688112377959'
  alias: "Litière Intelligente - \U0001F514 Notifier litière pleine"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_litter_full
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_cat_litter_box
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_when_present
      title: "\U0001F408  Litière"
      message: Penser a nettoyer la litière !
      callback:
      - title: Litière Nettoyée
        event: reset_litter_tracking
      icon: mdi:cat
      color: deep-orange
      persistent: true
      tag: litter_full
      until:
      - entity_id: binary_sensor.is_litter_full
        new_state: 'off'
  mode: single
- id: '1688112671844'
  alias: "Litière Intelligente - \U0001F4F2 Remettre à zero passages litière depuis
    notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: reset_litter_tracking
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: 0
    target:
      entity_id: input_number.litter_tracking
  mode: single
- id: '1688114260897'
  alias: Poubelles Intelligentes - Informer poubelle noire à sortir
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.planning_poubelle_noire
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_take_out_trash
    state: 'on'
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.poubelle_noire_a_sortir
  mode: single
- id: '1688114327500'
  alias: Poubelles Intelligentes - Informer poubelle verte à sortir
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.planning_poubelle_verte
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_take_out_trash
    state: 'on'
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.poubelle_verte_a_sortir
  mode: single
- id: '1688114732811'
  alias: "Poubelles Intelligentes - \U0001F514 Notifier poubelle noir non sortie"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.planning_poubelle_noire
    to: 'off'
    from: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_take_out_trash
    state: 'on'
  - condition: state
    entity_id: input_boolean.poubelle_noire_a_sortir
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_present
      title: "\U0001F5D1 Poubelle Noire"
      message: N'oublie pas de sortir la poubelle noire
      icon: mdi:delete
      color: deep-orange
      tag: black_trash
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.poubelle_noire_a_sortir
  mode: single
- id: '1688114808231'
  alias: "Poubelles Intelligentes - \U0001F514 Notifier poubelle verte non sortie"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.planning_poubelle_verte
    to: 'off'
    from: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_take_out_trash
    state: 'on'
  - condition: state
    entity_id: input_boolean.poubelle_verte_a_sortir
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_present
      title: ♻️ Poubelle Verte
      message: N'oublie pas de sortir la poubelle verte
      icon: mdi:recycle
      color: deep-orange
      tag: green_trash
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.poubelle_verte_a_sortir
  mode: single
- id: '1688116237944'
  alias: "Boîte aux Lettres Intelligente - \U0001F514 Notifier courrier "
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.capteur_mouvement_boite_aux_lettres
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_mailbox
    state: 'on'
  - condition: state
    entity_id: binary_sensor.is_front_door_recently_open
    state: 'off'
  action:
  - event: NOTIFIER
    event_data:
      action: send_when_present
      title: "\U0001F4EC  Boite aux lettres"
      message: Vous avez du courrier !
      icon: mdi:mailbox-up
      color: green
      tag: you_got_mail
  mode: single
- id: '1688116301973'
  alias: Boîte aux Lettres Intelligente - Supprimer notification courrier
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.capteur_mouvement_boite_aux_lettres
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_mailbox
    state: 'on'
  - condition: state
    entity_id: binary_sensor.is_front_door_recently_open
    state: 'on'
  action:
  - event: NOTIFIER_DISCARD
    event_data:
      tag: you_got_mail
  mode: single
- id: '1688117249626'
  alias: Boutons Hue - Bouton Entrée
  description: ''
  trigger:
  - platform: state
    entity_id:
    - event.entree_switch_button_1
    attribute: event_type
    to: repeat
    id: 'on'
  - platform: state
    entity_id:
    - event.entree_switch_button_4
    attribute: event_type
    to: repeat
    id: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: script.reset_lights_day_area
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: script.leave_home
        data: {}
  mode: queued
  max: 10
- id: '1688117431729'
  alias: Boutons Hue - Bouton Salon Couloir
  description: ''
  trigger:
  - platform: state
    entity_id:
    - event.salon_couloir_switch_button_1
    attribute: event_type
    to: repeat
    id: 'on'
  - platform: state
    entity_id:
    - event.salon_couloir_switch_button_4
    attribute: event_type
    to: repeat
    id: 'off'
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: script.reset_lights_day_area
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id:
          - light.lumieres_rez_de_chaussee
          - light.exterieur
  mode: queued
  max: 10
- id: '1688118075093'
  alias: "Machine a Laver Intelligente - \U0001F514 Notifier cycle de lavage terminé"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_washing_machine_running
    to: 'off'
    from: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_washing_machine
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_when_present
      title: "\U0001FAE7 Machine à laver"
      message: Cycle de lavage terminé !
      icon: mdi:washing-machine
      color: green
      tag: washing_mashine_over
  mode: single
- id: '1688124199640'
  alias: Bienvenue - Allumer lumières et ouvrir volets quand porte ouverte
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_welcome_home
    state: 'on'
  action:
  - wait_for_trigger:
    - platform: state
      entity_id:
      - binary_sensor.capteur_ouverture_porte_entree
      to: 'on'
    timeout:
      hours: 0
      minutes: 15
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - if:
    - condition: state
      entity_id: sun.sun
      state: below_horizon
    then:
    - service: hue.activate_scene
      data:
        transition: 3
      target:
        entity_id: scene.entree_entree_100
    - delay:
        hours: 0
        minutes: 0
        seconds: 3
        milliseconds: 0
    - service: hue.activate_scene
      data:
        transition: 3
      target:
        entity_id:
        - scene.salon_salon_100
    - delay:
        hours: 0
        minutes: 0
        seconds: 3
        milliseconds: 0
    - service: hue.activate_scene
      data:
        transition: 3
      target:
        entity_id: scene.cuisine_cuisine_100
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: cover.living_room_cover
        attribute: current_position
        state: 100
    then:
    - service: cover.open_cover
      data: {}
      target:
        entity_id: cover.living_room_cover
  mode: single
- id: '1688129246113'
  alias: Irrigation intelligente - Calculer fin arrosage
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.irrigation_switch
    to: 'on'
    from: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.irrigation_automation
    state: 'on'
  action:
  - service: input_datetime.set_datetime
    data:
      datetime: '{{ now() + timedelta (minutes = states(''input_number.irrigation_time'')
        | int) }}'
    target:
      entity_id: input_datetime.end_of_irrigation
  mode: single
- id: '1688129871554'
  alias: Irrigation intelligente - Arrêter arrosage
  description: ''
  trigger:
  - platform: time
    at: input_datetime.end_of_irrigation
  condition:
  - condition: state
    entity_id: input_boolean.irrigation_automation
    state: 'on'
  - condition: state
    entity_id: switch.irrigation_switch
    state: 'on'
  action:
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.irrigation_switch
  mode: single
- id: '1688131649930'
  alias: Irrigation intelligente - Arrêter arrosage au démarrage si expiré
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  condition:
  - condition: state
    entity_id: input_boolean.irrigation_automation
    state: 'on'
  - condition: state
    entity_id: switch.irrigation_switch
    state: 'on'
  - condition: template
    value_template: '{{ as_timestamp(now()) > state_attr(''input_datetime.end_of_irrigation'',
      ''timestamp'') }}'
  action:
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.irrigation_switch
  mode: single
- id: '1688134691132'
  alias: "Tesla - \U0001F514 Notifier charge hors heures creuses"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.tesla_state
    to: charging
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: device_tracker.tesla_device_tracker
    state: home
  - condition: state
    entity_id: schedule.heures_pleines
    state: 'off'
  - condition: template
    value_template: '{{ now() + timedelta(hours = states("sensor.tesla_time_to_full_charge")
      | float) > state_attr(''schedule.heures_pleines'', ''next_event'') }}'
  action:
  - variables:
      new_target_percentage: '{{ (( states(''sensor.tesla_charge_limit'')|float -  states(''sensor.tesla_battery_level'')|float)
        * (state_attr(''schedule.heures_pleines'', ''next_event'') - now()) / timedelta(
        hours = states(''sensor.tesla_time_to_full_charge'') | float) + states(''sensor.tesla_battery_level'')|float)
        | round(0)}}'
      actual_end_date: '{{ (now() + timedelta(hours = states("sensor.tesla_time_to_full_charge")
        |float)).strftime("%H:%M") }}'
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: "️\U0001F697 Tesla"
      message: La recharge est prevue de finir après la fin des heures creuse ({{actual_end_date}}).
        Pense à reduire la cibe de recharge vers {{new_target_percentage}}%
      click_ur: /lovelace/tesla
      icon: mdi:car
      color: deep-orange
      tag: tesla_end_charge_after_off_peak_hours
      until:
      - entity_id: sensor.tesla_charge_limit
        new_state: '{{new_target_percentage}}'
  mode: single
- id: '1688139412657'
  alias: Réveil intelligent - Régler heures de déclenchement
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_datetime.wake_up_time
  condition:
  - condition: state
    entity_id: input_boolean.automation_wake_up
    state: 'on'
  action:
  - service: input_datetime.set_datetime
    data:
      datetime: '{{today_at(states(''input_datetime.wake_up_time'')) - timedelta(minutes
        = 5)}}'
    target:
      entity_id: input_datetime.wake_up_time_lights
  - service: input_datetime.set_datetime
    data:
      datetime: '{{today_at(states(''input_datetime.wake_up_time'')) - timedelta(minutes
        = 30)}}'
    target:
      entity_id: input_datetime.wake_up_time_coffee_maker
  mode: single
- id: '1688139621896'
  alias: Réveil intelligent - Allumer lumières
  description: ''
  trigger:
  - platform: time
    at: input_datetime.wake_up_time_lights
  condition:
  - condition: state
    entity_id: input_boolean.automation_wake_up
    state: 'on'
  - condition: state
    entity_id: binary_sensor.home_occupied
    state: 'on'
  - condition: state
    entity_id: binary_sensor.workday_today
    state: 'on'
  action:
  - service: script.wake_up
    data: {}
  mode: single
- id: '1688139704214'
  alias: Réveil intelligent - Allumer machine à café
  description: ''
  trigger:
  - platform: time
    at: input_datetime.wake_up_time_coffee_maker
  condition:
  - condition: state
    entity_id: input_boolean.automation_wake_up
    state: 'on'
  - condition: state
    entity_id: binary_sensor.home_occupied
    state: 'on'
  - condition: state
    entity_id: binary_sensor.workday_today
    state: 'on'
  - condition: state
    entity_id: input_boolean.wake_up_automation_control_coffee_maker
    state: 'on'
  action:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.coffeemaker
  mode: single
- id: '1688140625614'
  alias: "Réveil intelligent - \U0001F514 Régler heure réveil via téléphone JL"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.pixel_6_next_alarm
    not_from: unavailable
    not_to: unavailable
  condition:
  - condition: state
    entity_id: input_boolean.automation_wake_up
    state: 'on'
  - condition: template
    value_template: '{{ states(''input_datetime.wake_up_time'') != (((state_attr(''sensor.pixel_6_next_alarm'',
      ''Time in Milliseconds'') | int / 1000)) | timestamp_custom(''%H:%M:%S'')) }}'
  action:
  - variables:
      human_readable_phone_alarm: '{{(((state_attr(''sensor.pixel_6_next_alarm'',
        ''Time in Milliseconds'') | int / 1000)) | timestamp_custom(''%H:%M''))}}'
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: ⏰ Alarme réglée pour {{human_readable_phone_alarm}}
      message: Utiliser pour le réveil inteligent ?
      callback:
      - title: Oui
        event: set_new_wake_up_time
      click_ur: /dashboard-automatisations/automatisations
      icon: mdi:alarm
      tag: jl_phone_alarm_changed
  mode: single
- id: '1688143290196'
  alias: "Réveil intelligent - \U0001F4F2 Régler heure réveil via téléphone JL (Confirmation)"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: set_new_wake_up_time
  condition: []
  action:
  - service: input_datetime.set_datetime
    data:
      timestamp: '{{as_timestamp(states(''sensor.pixel_6_next_alarm''))}}'
    target:
      entity_id: input_datetime.wake_up_time
  mode: single
- id: '1688301259694'
  alias: TV intelligente - Allumer KEF quand TV allumée
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_tv_on
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_watch_tv
    state: 'on'
  - condition: state
    entity_id: script.turn_on_media_center
    state: 'off'
  - condition: state
    entity_id: media_player.kef
    state: 'off'
  action:
  - service: script.turn_on_media_center
    data: {}
  mode: single
- id: '1688301320320'
  alias: 'TV intelligente - Éteindre KEF quand TV éteinte '
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_tv_on
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_watch_tv
    state: 'on'
  - condition: state
    entity_id: script.turn_off_media_center
    state: 'off'
  - condition: state
    entity_id: media_player.kef
    state: 'on'
  action:
  - service: script.turn_off_media_center
    data: {}
  mode: single
- id: '1688303443168'
  alias: 'TV intelligente - Controller Lumières '
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.tv_cast
    from:
    to:
    variables:
      from_state: '{{trigger.from_state.state}}'
      to_state: '{{trigger.to_state.state}}'
      from_app: "{% if 'app_name' in trigger.from_state.attributes -%}\n  {{trigger.from_state.attributes.app_name}}\n{%-
        else -%}\n  no_app\n{%- endif %}"
      to_app: "{% if 'app_name' in trigger.to_state.attributes -%}\n  {{trigger.to_state.attributes.app_name}}\n{%-
        else -%}\n  no_app\n{%- endif %}"
      supported_apps: '{{["Netflix", "Plex", "Prime Video"]}}'
  condition:
  - condition: state
    entity_id: input_boolean.automation_watch_tv
    state: 'on'
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{from_state in ["off", "paused", "idle", "buffering"] and
          to_state == "playing" and to_app in supported_apps}}'
      sequence:
      - service: script.lights_set_tv
        data: {}
    - conditions:
      - condition: template
        value_template: '{{from_state == "playing" and to_state in ["paused", "buffering"]
          and to_app in supported_apps}}'
      sequence:
      - service: script.lights_set_tv_paused
        data: {}
    - conditions:
      - condition: template
        value_template: '{{from_state in ["playing" , "paused", "buffering"] and to_state
          in ["off" , "idle"] and from_app in supported_apps}}'
      sequence:
      - service: script.reset_lights_day_area
        data: {}
  mode: queued
  max: 10
- id: '1688305917710'
  alias: TV intelligente - Controller Lumières (PS5)
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_ps5_used
    from: 'off'
    to: 'on'
    id: 'on'
  - platform: state
    entity_id:
    - binary_sensor.is_ps5_used
    from: 'on'
    to: 'off'
    id: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_watch_tv
    state: 'on'
  - condition: state
    entity_id: sun.sun
    state: below_horizon
    enabled: true
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: 'on'
      sequence:
      - service: script.lights_set_tv
        data: {}
    - conditions:
      - condition: trigger
        id: 'off'
      sequence:
      - service: script.reset_lights_day_area
        data: {}
  mode: single
- id: '1688329966467'
  alias: Volet - Edge Cases
  description: ''
  trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: open_cover
      service_data:
        entity_id: cover.living_room_cover
    id: open
  - platform: event
    event_type: call_service
    event_data:
      domain: cover
      service: close_cover
      service_data:
        entity_id: cover.living_room_cover
    id: closed
  condition:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: trigger
        id: open
      - condition: state
        entity_id: cover.living_room_cover
        attribute: current_position
        state: 100
    - condition: and
      conditions:
      - condition: trigger
        id: closed
      - condition: state
        entity_id: cover.living_room_cover
        attribute: current_position
        state: 0
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: open
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.volet_salon_bouton_up_fallback
    - conditions:
      - condition: trigger
        id: closed
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.volet_salon_bouton_down_fallback
  mode: single
- id: '1688333037837'
  alias: Chauffage intelligent - Choisir Planning
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.all_openings
    for:
      hours: 0
      minutes: 1
      seconds: 0
    to: 'on'
    id: open
  - platform: state
    entity_id:
    - binary_sensor.all_openings
    to: 'off'
    id: closed
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    to: 'on'
    id: present
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    to: 'off'
    id: absent
  condition:
  - condition: state
    entity_id: input_boolean.automation_heat_home
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: open
      sequence:
      - service: input_select.select_option
        data:
          option: Frost Guard
        target:
          entity_id: input_select.heating_schedule_selector
    - conditions:
      - condition: trigger
        id: present
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.all_openings
            state: 'on'
            for:
              hours: 0
              minutes: 1
              seconds: 0
          sequence:
          - service: input_select.select_option
            data:
              option: Frost Guard
            target:
              entity_id: input_select.heating_schedule_selector
        default:
        - service: input_select.select_option
          data:
            option: Présent
          target:
            entity_id: input_select.heating_schedule_selector
    - conditions:
      - condition: trigger
        id: absent
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.all_openings
            state: 'on'
            for:
              hours: 0
              minutes: 1
              seconds: 0
          sequence:
          - service: input_select.select_option
            data:
              option: Frost Guard
            target:
              entity_id: input_select.heating_schedule_selector
        default:
        - service: input_select.select_option
          data:
            option: Absent
          target:
            entity_id: input_select.heating_schedule_selector
    - conditions:
      - condition: trigger
        id: closed
      sequence:
      - choose:
        - conditions:
          - condition: state
            entity_id: binary_sensor.home_occupied
            state: 'on'
          sequence:
          - service: input_select.select_option
            data:
              option: Présent
            target:
              entity_id: input_select.heating_schedule_selector
        - conditions:
          - condition: state
            entity_id: binary_sensor.home_occupied
            state: 'off'
          sequence:
          - service: input_select.select_option
            data:
              option: Absent
            target:
              entity_id: input_select.heating_schedule_selector
  mode: single
- id: '1688333375509'
  alias: Chauffage intelligent - Changer Température
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.heating_target_temperature
    not_to:
    - unavailable
    - unknown
  condition:
  - condition: state
    entity_id: input_boolean.automation_heat_home
    state: 'on'
  action:
  - service: climate.set_temperature
    target:
      entity_id: climate.netatmo
    data:
      temperature: '{{trigger.to_state.state}}'
  mode: single
- id: '1688333506527'
  alias: Chauffage intelligent - Vérifier cohérence
  description: ''
  trigger:
  - platform: state
    entity_id:
    - climate.netatmo
    attribute: temperature
  condition:
  - condition: state
    entity_id: input_boolean.automation_heat_home
    state: 'on'
  - condition: template
    value_template: '{{states("sensor.heating_target_temperature") | float != state_attr("climate.netatmo","temperature")}}'
  action:
  - service: climate.set_temperature
    target:
      entity_id: climate.netatmo
    data:
      temperature: '{{states(''sensor.heating_target_temperature'')}}'
  mode: queued
  max: 10
- id: '1688364991944'
  alias: Bureau - Contrôler lumière par VR
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.quest_in_use
    to: 'on'
    id: quest
    from: 'off'
  - platform: state
    entity_id:
    - binary_sensor.quest_in_use
    to: 'off'
    id: no_quest
    from: 'on'
  condition:
  - condition: state
    entity_id: person.jenova70
    state: home
  - condition: state
    state: 'on'
    entity_id: binary_sensor.capteur_presence_bureau_occupancy
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: quest
      sequence:
      - service: scene.create
        data:
          scene_id: office_previous_light_state
          snapshot_entities:
          - light.bureau
      - service: light.turn_on
        data:
          brightness_pct: 100
          kelvin: 3521
        target:
          entity_id:
          - light.bureau
          - light.hue_play_bars
    - conditions:
      - condition: trigger
        id: no_quest
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.hue_play_bars
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.office_previous_light_state
  mode: single
- id: '1688368387161'
  alias: Bureau - Contrôler lumière par Webcam
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.jean_loics_laptop_camera_in_use
    to: 'on'
    id: webcam
    from: 'off'
  - platform: state
    entity_id:
    - binary_sensor.jean_loics_laptop_camera_in_use
    to: 'off'
    id: no_webcam
    from: 'on'
  condition:
  - condition: state
    entity_id: person.jenova70
    state: home
  - condition: state
    state: 'on'
    entity_id: binary_sensor.capteur_presence_bureau_occupancy
  - condition: state
    entity_id: device_tracker.jean_loics_laptop
    state: home
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: webcam
      sequence:
      - service: scene.create
        data:
          scene_id: office_previous_light_state
          snapshot_entities:
          - light.bureau
      - service: light.turn_on
        data:
          brightness_pct: 100
          kelvin: 3521
        target:
          entity_id:
          - light.bureau
      - service: light.turn_on
        data:
          brightness_pct: 60
          kelvin: 3521
        target:
          entity_id:
          - light.hue_play_bars
    - conditions:
      - condition: trigger
        id: no_webcam
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.hue_play_bars
      - service: scene.turn_on
        data: {}
        target:
          entity_id: scene.office_previous_light_state
  mode: parallel
  max: 10
- id: '1688371319271'
  alias: Surveillance de la maison - Éteindre Alexa quand maison vide
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_home
    state: 'on'
  - condition: state
    entity_id: switch.alexa
    state: 'on'
  action:
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.alexa
  mode: single
- id: '1688371620889'
  alias: "Surveillance de la maison - \U0001F514 Notifier appareils allumées et maison
    vide"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_home
    state: 'on'
  action:
  - if:
    - condition: state
      entity_id: light.all_lights
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F4A1 Lumières allumées"
        message: Des lumières sont allumées alors que personne n'est présent
        callback:
        - title: Éteindre les lumières
          event: turn_off_lights
        click_ur: /lovelace/lights
        icon: mdi:lightbulb-alert
        color: deep-orange
        tag: home_empty_lights_still_on
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: light.all_lights
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.is_tv_on
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F4FA TV allumée"
        message: La TV est allumée alors que personne n'est présent
        callback:
        - title: Éteindre la TV
          event: turn_off_tv
        click_url: /lovelace/connected-devices
        icon: mdi:television
        color: deep-orange
        tag: home_empty_tv_still_on
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.is_tv_on
          new_state: 'off'
  - if:
    - condition: state
      entity_id: media_player.kef
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "\U0001F50A LSX allumées"
        message: Les enceintes LSX sont allumées alors que personne n'est présent
        callback:
        - title: Éteindre les LSX
          event: turn_off_lsx
        click_url: /lovelace/connected-devices
        icon: mdi:speaker-wireless
        color: deep-orange
        tag: home_empty_lsx_still_on
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: media_player.kef
          new_state: 'off'
  - if:
    - condition: state
      entity_id: switch.coffeemaker
      state: 'on'
    then:
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: ️☕️ Machine a café allumé
        message: La machine a café est allumée alors que personne n'est présent
        callback:
        - title: Éteindre la machine a café
        - event: turn_off_coffee_maker
        click_url: /lovelace/connected-devices
        icon: mdi:coffee
        color: deep-orange
        tag: home_empty_cofee_maker_still_on
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: switch.coffeemaker
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Porte(s) ouverte(s) !"
        message: 'Les portes suivantes sont toujours ouvertes alors que personne n''est
          présent:  {{open_doors}}'
        click_url: /lovelace/openings
        icon: mdi:door-open
        color: deep-orange
        tag: home_empty_door_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_doors
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_windows
      state: 'on'
    then:
    - variables:
        open_windows: "{{ \n  expand(states.binary_sensor.all_windows.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_nearest
        title: "️\U0001F6AA Fenêtre(s) ouverte(s) !"
        message: 'Les fenêtres suivantes sont toujours ouvertes alors que personne
          n''est présent: {{open_windows}}'
        click_url: /lovelace/openings
        icon: mdi:window-open
        color: deep-orange
        tag: home_empty_window_open
        until:
        - entity_id: binary_sensor.home_occupied
          new_state: 'on'
        - entity_id: binary_sensor.all_windows
          new_state: 'off'
  mode: single
- id: '1688373819985'
  alias: Surveillance de la maison - Allumer Alexa quand maison occupée
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_home
    state: 'on'
  - condition: state
    entity_id: switch.alexa
    state: 'off'
  action:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.alexa
  mode: single
- id: '1688374658190'
  alias: "Surveillance de la maison - \U0001F514 Notifier machine à café allumée depuis
    longtemps "
  description: ''
  trigger:
  - platform: state
    entity_id:
    - switch.coffeemaker
    to: 'on'
    for:
      hours: 1
      minutes: 30
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_home
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_present
      title: ☕️ Machine a café allumé
      message: La machine a café est allumée depuis longtemps
      callback:
      - title: Éteindre la machine a café
        event: turn_off_coffee_maker
      click_url: /lovelace/connected-devices
      icon: mdi:coffee
      color: deep-orange
      tag: coffee_maker_on_since_too_long
      until:
      - entity_id: switch.coffeemaker
        new_state: 'off'
  mode: single
- id: '1688375110167'
  alias: "Surveillance de la maison - \U0001F514 Notifier pluie et portes/fenêtres
    ouvertes "
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_raining_now
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_home
    state: 'on'
  - condition: state
    entity_id: binary_sensor.home_occupied
    state: 'on'
  - condition: state
    entity_id: binary_sensor.all_openings
    state: 'on'
  action:
  - if:
    - condition: state
      entity_id: binary_sensor.all_doors
      state: 'on'
    then:
    - variables:
        open_doors: "{{ \n  expand(states.binary_sensor.all_doors.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_present
        title: "️\U0001F302 Il pleut!"
        message: 'Les portes suivantes sont ouvertes et il commence a pleuvoir: {{open_doors}}'
        click_url: /lovelace/openings
        icon: mdi:door-open
        color: deep-orange
        tag: raining_door_open
        until:
        - entity_id: binary_sensor.is_raining_now
          new_state: 'off'
        - entity_id: binary_sensor.all_doors
          new_state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.all_windows
      state: 'on'
    then:
    - variables:
        open_windows: "{{ \n  expand(states.binary_sensor.all_windows.attributes.entity_id)\n
          \   | selectattr('state', 'eq', 'on')\n    | map(attribute='attributes.friendly_name')
          \n    | list\n    | join(\", \")\n}}"
    - event: NOTIFIER
      event_data:
        action: send_to_present
        title: "️\U0001F302 Il pleut!"
        message: 'Les fenêtres suivantes sont ouvertes et il commence a pleuvoir:
          {{open_windows}}'
        click_url: /lovelace/openings
        icon: mdi:window-open
        color: deep-orange
        tag: raining_window_open
        until:
        - entity_id: binary_sensor.is_raining_now
          new_state: 'off'
        - entity_id: binary_sensor.all_windows
          new_state: 'off'
  mode: single
- id: '1688375484810'
  alias: "Surveillance de la maison - \U0001F4F2 Éteindre lumières depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: turn_off_lights
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.all_lights
  mode: single
- id: '1688375570728'
  alias: "Surveillance de la maison - \U0001F4F2 Éteindre TV depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: turn_off_tv
  condition: []
  action:
  - service: remote.turn_off
    data: {}
    target:
      entity_id: remote.jl_s_tv
  mode: single
- id: '1688375617351'
  alias: "Surveillance de la maison - \U0001F4F2 Éteindre KEF depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: turn_off_lsx
  condition: []
  action:
  - service: media_player.turn_off
    data: {}
    target:
      entity_id: media_player.kef
  mode: single
- id: '1688375659718'
  alias: "Surveillance de la maison - \U0001F4F2 Éteindre machine à café depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: turn_off_coffee_maker
  condition: []
  action:
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.coffeemaker
  mode: single
- id: '1688386134462'
  alias: "Surveillance du système - \U0001F514 Notifier mise a jour dispo"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.pending_updates
    attribute: entities
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_system
    state: 'on'
  - condition: template
    value_template: '{{trigger.to_state.state | int(0) > 0}}'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: "\U0001F389 Mise a jour disponible"
      message: '{{trigger.to_state.attributes.entities | join('', '')}}'
      click_url: /config/dashboard
      icon: mdi:party-popper
      color: deep-purple
      tag: update-available
      until:
      - entity_id: sensor.pending_updates
        new_state: '0'
  mode: queued
  max: 10
- id: '1688386909438'
  alias: "Surveillance du système - \U0001F514 Notifier mise a jour tesla dispo"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.tesla_update_available
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_system
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: "\U0001F389 Mise a jour disponible"
      message: Tesla
      click_url: /config/dashboard
      icon: mdi:party-popper
      color: deep-purple
      tag: tesla_update
      until:
      - entity_id: binary_sensor.tesla_update_available
        new_state: 'off'
  mode: single
- id: '1688387237599'
  alias: Surveillance du système - Backup
  description: ''
  trigger:
  - platform: time
    at: 01:00:00
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_system
    state: 'on'
  action:
  - service: hassio.backup_full
    data:
      compressed: true
      name: Home Assistant Backup {{now()}}
  mode: single
- id: '1688390987276'
  alias: "Surveillance du système - \U0001F514 Notifier batteries faibles"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.low_batteries
    to:
  condition:
  - condition: state
    entity_id: input_boolean.automation_monitor_system
    state: 'on'
  - condition: template
    value_template: '{{trigger.to_state.state | float(0) > 0}}'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: "\U0001FAAB Batteries faibles !"
      message: '{{trigger.to_state.attributes.entities | join('', '')}}'
      click_url: /config/dashboard
      icon: mdi:battery-alert
      color: deep-orange
      tag: low-battery
      until:
      - entity_id: sensor.low_batteries
        new_state: '0'
  mode: single
- id: '1688537182551'
  alias: "Servarr - \U0001F514 Notification "
  description: ''
  trigger:
  - platform: webhook
    allowed_methods:
    - POST
    local_only: true
    webhook_id: sonarr-grab--KqTQ4vReuFd_as1xTR_hPqk2
    id: sonarr-grab
    variables:
      title: "\U0001F4FA Épisode en télechargement ..."
      message: '{{trigger.json.series.title}} - {{trigger.json.episodes[0].seasonNumber}}x{{trigger.json.episodes[0].episodeNumber}}
        - {{trigger.json.episodes[0].title}}'
      tag: '{{trigger.json.downloadId}}'
      color: blue
  - platform: webhook
    allowed_methods:
    - POST
    local_only: true
    webhook_id: sonarr-download--KqTQ4vReuFd_as1xTR_hPqk2
    id: sonarr-download
    variables:
      title: "\U0001F4FA Épisode téléchargé !"
      message: '{{trigger.json.series.title}} - {{trigger.json.episodes[0].seasonNumber}}x{{trigger.json.episodes[0].episodeNumber}}
        - {{trigger.json.episodes[0].title}}'
      tag: '{{trigger.json.downloadId}}'
      color: green
  - platform: webhook
    allowed_methods:
    - POST
    local_only: true
    webhook_id: radarr-grab-ugUFeiF1HF_WK_-jpm1aFMCQ
    id: radarr-grab
    variables:
      title: "\U0001F3A5 Film en télechargement ..."
      message: '{{trigger.json.movie.title}} ({{trigger.json.movie.year}})'
      tag: '{{trigger.json.downloadId}}'
      color: blue
  - platform: webhook
    allowed_methods:
    - POST
    local_only: true
    webhook_id: radarr-download-grab-ugUFeiF1HF_WK_-jpm1aFMCQ
    id: radarr-download
    variables:
      title: "\U0001F3A5 Film téléchargé !"
      message: '{{trigger.json.movie.title}} ({{trigger.json.movie.year}})'
      tag: '{{trigger.json.downloadId}}'
      color: green
  condition: []
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: '{{title}}'
      message: '{{message}}'
      icon: mdi:television-shimmer
      color: '{{color}}'
      tag: '{{tag}}'
  mode: single
- id: '1688555445627'
  alias: Nettoyage Intelligent - Nettoyer quand maison vide
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_house
    state: 'on'
  action:
  - if:
    - condition: state
      entity_id: input_boolean.house_cleaning_first_floor
      state: 'on'
    - condition: state
      entity_id: binary_sensor.should_neuneu_run
      state: 'on'
    - condition: not
      conditions:
      - condition: state
        entity_id: vacuum.neuneu
        state: cleaning
    then:
    - service: vacuum.start
      data: {}
      target:
        entity_id: vacuum.neuneu
  mode: single
- id: '1688555577151'
  alias: Nettoyage Intelligent - RTH quand maison occupée
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.home_occupied
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_house
    state: 'on'
  action:
  - if:
    - condition: state
      entity_id: vacuum.neuneu
      state: cleaning
    then:
    - service: vacuum.return_to_base
      data: {}
      target:
        entity_id: vacuum.neuneu
  mode: single
- id: '1688555745575'
  alias: Nettoyage Intelligent - Démarrer NeuNeu quand rez-de-chaussée sale
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.should_neuneu_run
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_house
    state: 'on'
  - condition: state
    entity_id: input_boolean.house_cleaning_first_floor
    state: 'on'
  - condition: state
    entity_id: binary_sensor.home_occupied
    state: 'off'
  - condition: not
    conditions:
    - condition: state
      entity_id: vacuum.neuneu
      state: cleaning
  action:
  - service: vacuum.start
    data: {}
    target:
      entity_id: vacuum.neuneu
  mode: single
- id: '1688556025376'
  alias: "Nettoyage Intelligent - \U0001F514 Notifier rez-de-chaussée très sale"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.should_neuneu_run_urgently
    from: 'off'
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.automation_clean_house
    state: 'on'
  - condition: state
    entity_id: input_boolean.house_cleaning_first_floor
    state: 'on'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_nearest
      title: "\U0001F9F9 Rez-de-chaussé sale"
      message: NeuNeu n'a pas tourné depuis longtemps! Ne pas oublier de le lancer!
      callback:
      - title: Lancer NeuNeu
        event: start_neuneu
      click_url: /lovelace/vacuums
      icon: mdi:liquid-spot
      color: deep-orange
      tag: first_floor_very_dirty
      until:
      - entity_id: vacuum.neuneu
        new_state: cleaning
  mode: single
- id: '1688556280183'
  alias: "Nettoyage Intelligent - \U0001F514 Notifier Nettoyage NeuNeu"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.neuneu
    to: cleaning
  condition: []
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_nearest
      title: "\U0001F9F9 Nettoyage"
      message: NeuNeu démarre son nettoyage
      callback:
      - title: Arrêter  NeuNeu
        event: rth_neuneu
      click_url: /lovelace/vacuums
      icon: mdi:robot-vacuum
      tag: neuneu
  mode: single
- id: '1688556647795'
  alias: Nettoyage Intelligent - Considérer rez-de-chaussée propre
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.neuneu
    to: cleaning
    for:
      hours: 0
      minutes: 15
      seconds: 0
  condition: []
  action:
  - service: input_datetime.set_datetime
    data:
      datetime: '{{now()}}'
    target:
      entity_id: input_datetime.dernier_nettoyage_de_neuneu
  mode: single
- id: '1688557191445'
  alias: "Nettoyage Intelligent - \U0001F514 Notifier NeuNeu terminé"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.neuneu
    to: docked
    from:
    - paused
    - cleaning
    - returning
  condition: []
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_nearest
      title: ✅ NeuNeu a terminé
      message: 'Surface nettoyée: {{states(''sensor.neuneu_cleaned_area'')}}m²'
      image_url: '{{state_attr(''camera.neuneu_map'', ''entity_picture'')}}'
      click_url: /lovelace/vacuums
      icon: mdi:robot-vacuum
      color: green
      tag: neuneu
  - if:
    - condition: state
      entity_id: sensor.neuneu_water_tank
      state: installed
    then:
    - event: NOTIFIER
      event_data:
        action: send_when_present
        title: "\U0001F9FC Serpillière attachée"
        message: La serpillière est toujours attachée à NeuNeu. Pensez a l'enlever!
        click_url: /lovelace/vacuums
        icon: mdi:faucet
        color: deep-orange
        tag: neuneu_mop_installed
        until:
        - entity_id: sensor.neuneu_water_tank
          new_state: not_installed
  mode: single
- id: '1688557488862'
  alias: "Nettoyage Intelligent - \U0001F514 Notifier NeuNeu erreur"
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.neuneu
    to: error
  condition: []
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_nearest
      message: NeuNeu est en erreur
      title: ⚠️ NeuNeu est en erreur
      image_url: '{{state_attr(''camera.neuneu_map'', ''entity_picture'')}}'
      click_url: /lovelace/vacuums
      icon: mdi:robot-vacuum
      color: deep-orange
      tag: neuneu
  mode: single
- id: '1688557628209'
  alias: "Nettoyage Intelligent - \U0001F4F2 Démarrer NeuNeu depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: start_neuneu
  condition: []
  action:
  - service: vacuum.start
    data: {}
    target:
      entity_id: vacuum.neuneu
  mode: single
- id: '1688557670153'
  alias: "Nettoyage Intelligent - \U0001F4F2 RTH NeuNeu depuis notification"
  description: ''
  trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: rth_neuneu
  condition: []
  action:
  - service: vacuum.return_to_base
    data: {}
    target:
      entity_id: vacuum.neuneu
  mode: single
- id: '1688561458713'
  alias: Talkie - Changer Assistant
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.talkie_change_assistant_button
    to: 'on'
    variables:
      available_assistants:
      - Assist
      - Jarvis
      - Papa Noël
      - Régis
  condition: []
  action:
  - if:
    - condition: template
      value_template: '{{ states("select.talkie_pipeline_d_assistant") in available_assistants
        }}'
    then:
    - variables:
        array_length: '{{ available_assistants | length }}'
        current_position: '{{ available_assistants.index(states(''select.talkie_pipeline_d_assistant''))
          }}'
        new_position: '{{ (current_position + 1) % array_length }}'
        next_assistant: '{{ available_assistants[new_position] }}'
    - service: select.select_option
      data:
        option: '{{next_assistant}}'
      target:
        entity_id: select.talkie_pipeline_d_assistant
    else:
    - variables:
        new_position: 0
        next_assistant: '{{ available_assistants[new_position] }}'
    - service: select.select_option
      data:
        option: '{{next_assistant}}'
      target:
        entity_id: select.talkie_pipeline_d_assistant
  - service: tts.cloud_say
    data:
      cache: false
      entity_id: media_player.talkie_media_player
      language: fr-FR
      message: Vous êtes en communication avec {{states('select.talkie_pipeline_d_assistant')}}
  mode: single
- id: '1688562617686'
  alias: Talkie - Réinitialiser Assistant
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.talkie_assistant_en_cours
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 1
      seconds: 0
    variables:
      available_assistants:
      - Assist
      - Papa Noël
      - Jarvis
      - Régis
  condition: []
  action:
  - variables:
      new_position: 0
      next_assistant: '{{ available_assistants[new_position] }}'
  - service: select.select_option
    data:
      option: '{{next_assistant}}'
    target:
      entity_id: select.talkie_pipeline_d_assistant
  mode: single
- id: '1688571869274'
  alias: Nettoyage Intelligent - Réinitialiser Étage NeuNeu
  description: ''
  trigger:
  - platform: state
    entity_id:
    - vacuum.neuneu
    to: docked
  condition:
  - condition: state
    entity_id: select.neuneu_selected_map
    state: 'Premier Étage '
  action:
  - service: select.select_option
    data:
      option: 'Rez-de-chaussée '
    target:
      entity_id: select.neuneu_selected_map
  mode: single
- id: '1688927204517'
  alias: "Tesla - \U0001F514 Notifier réinitialisation de cible de charge "
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.tesla_plugged_in
    from: 'on'
    to: 'off'
  condition:
  - condition: state
    entity_id: device_tracker.tesla_device_tracker
    state: home
  - condition: not
    conditions:
    - condition: state
      entity_id: sensor.tesla_charge_limit
      state: '100'
  action:
  - event: NOTIFIER
    event_data:
      action: send_to_jl
      title: "️\U0001F697 Tesla"
      message: Pense à réinitialiser la cible de recharge (actuellement à {{states("sensor.tesla_charge_limit")}}%)
      click_ur: /lovelace/tesla
      icon: mdi:car
      color: blue
      tag: tesla_reset_charge_limit
      until:
      - entity_id: sensor.tesla_charge_limit
        new_state: '100'
  mode: single
- id: '1688927639584'
  alias: 'Vélo - Contrôler charge en fonction du tarif électrique '
  description: ''
  trigger:
  - platform: state
    entity_id:
    - schedule.heures_pleines
    from: 'on'
    to: 'off'
    id: off_peak
  - platform: state
    entity_id:
    - schedule.heures_pleines
    from: 'off'
    to: 'on'
    id: peak
  condition:
  - condition: state
    entity_id: input_boolean.automation_smart_bike_charging
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - peak
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.prise_velo
    - conditions:
      - condition: trigger
        id:
        - off_peak
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.prise_velo
  mode: single
- id: '1688927728999'
  alias: Vélo - Réinitialisation prise démarrage Home Assistant
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  condition:
  - condition: state
    entity_id: input_boolean.automation_smart_bike_charging
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: schedule.heures_pleines
        state: 'on'
      sequence:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: switch.prise_velo
    - conditions:
      - condition: state
        entity_id: schedule.heures_pleines
        state: 'off'
      sequence:
      - service: switch.turn_on
        data: {}
        target:
          entity_id: switch.prise_velo
  mode: single
- id: '1689253436663'
  alias: Lumières Extérieures - Synchroniser Hue et SONOFF
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.is_exterior_sphere_bright
    from: 'off'
    to: 'on'
    id: sphere_bright
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - platform: state
    entity_id:
    - binary_sensor.is_exterior_sphere_bright
    from: 'on'
    to: 'off'
    id: sphere_not_bright
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - platform: state
    entity_id:
    - light.plafonnier_exterieur
    from: 'off'
    to: 'on'
    id: ceiling_light_on
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - platform: state
    entity_id:
    - light.plafonnier_exterieur
    from: 'on'
    to: 'off'
    id: ceiling_light_off
    for:
      hours: 0
      minutes: 0
      seconds: 1
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - sphere_bright
      - condition: state
        entity_id: light.plafonnier_exterieur
        state: 'off'
      sequence:
      - service: light.turn_on
        data: {}
        target:
          entity_id: light.plafonnier_exterieur
    - conditions:
      - condition: trigger
        id:
        - sphere_not_bright
      - condition: state
        entity_id: light.plafonnier_exterieur
        state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.plafonnier_exterieur
    - conditions:
      - condition: trigger
        id:
        - ceiling_light_on
      - condition: state
        entity_id: binary_sensor.is_exterior_sphere_bright
        state: 'off'
      sequence:
      - service: light.turn_on
        data:
          brightness_pct: 100
        target:
          entity_id: light.exterieur
    - conditions:
      - condition: trigger
        id:
        - ceiling_light_off
      - condition: state
        entity_id: binary_sensor.is_exterior_sphere_bright
        state: 'on'
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.exterieur
  mode: parallel
  max: 10
- id: '1689530050696'
  alias: Pulse - Arrêter Pulse
  description: ''
  trigger:
  - platform: time
    at: input_datetime.pulse_end_time
  condition: []
  action:
  - if:
    - condition: state
      entity_id: light.2d_matrix
      state: 'on'
    then:
    - service: light.turn_off
      data: {}
      target:
        entity_id:
        - light.2d_matrix
  mode: single
- id: '1690221385338'
  alias: "Assist - \U0001F4E3 Bureau Position Debout "
  description: ''
  trigger:
  - platform: conversation
    command:
    - (Lève|Monte) le bureau
    - '[(Mais|Mets|Passe)] le bureau [en] (mode|position) debout'
  condition:
  - condition: state
    entity_id: binary_sensor.standing_desk_moving
    state: 'off'
  action:
  - service: button.press
    data: {}
    target:
      entity_id: button.standing_desk_move_desk_to_position_1
    enabled: true
  mode: single
- id: '1690221432357'
  alias: "Assist - \U0001F4E3 Bureau Position Assise"
  description: ''
  trigger:
  - platform: conversation
    command:
    - (Baisse|descend|descends) le bureau
    - '[(Mais|Mets|Passe)] le bureau [en] (mode|position) (assis|assise)'
  condition:
  - condition: state
    entity_id: binary_sensor.standing_desk_moving
    state: 'off'
  action:
  - service: button.press
    data: {}
    target:
      entity_id: button.standing_desk_move_desk_to_position_2
    enabled: true
  mode: single
- id: '1690362715725'
  alias: Pluie - Incrémenter Pluie Journalière
  description: ''
  trigger:
  - platform: time_pattern
    minutes: '*'
    hours: '*'
    seconds: '1'
  condition:
  - condition: state
    entity_id: binary_sensor.is_raining_now
    state: 'on'
  action:
  - service: input_number.increment
    data: {}
    target:
      entity_id: input_number.daily_rain
  mode: single
- id: '1690362812143'
  alias: Pluie - Réinitialiser Pluie Journalière
  description: ''
  trigger:
  - platform: time_pattern
    hours: '0'
    minutes: '0'
    seconds: '0'
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: 0
    target:
      entity_id: input_number.daily_rain
  mode: single
- id: '1690555063262'
  alias: Assist - Notifier rappel lointain
  description: ''
  trigger:
  - platform: calendar
    event: start
    offset: 0:0:0
    entity_id: calendar.reminders
  condition: []
  action:
  - service: script.reminder_for_later
    data:
      days: 0
      hours: 0
      minutes: 0
      seconds: 0
      media_player: media_player.talkie_media_player
      reminder: '{{trigger.calendar_event.summary}}'
  mode: single
- id: '1690826979664'
  alias: "Assist - \U0001F4E3 Commandes Multiple "
  description: ''
  trigger:
  - platform: conversation
    command:
    - '{command1} et {command2}'
    id: fr
  - platform: conversation
    command:
    - '{command1} and {command2}'
    id: en
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - fr
      sequence:
      - service: conversation.process
        data:
          agent_id: homeassistant
          language: fr
          text: '{{trigger.slots.command1}}'
      - service: conversation.process
        data:
          agent_id: homeassistant
          language: fr
          text: '{{trigger.slots.command2}}'
    - conditions:
      - condition: trigger
        id:
        - en
      sequence:
      - service: conversation.process
        data:
          agent_id: homeassistant
          language: en
          text: '{{trigger.slots.command1}}'
      - service: conversation.process
        data:
          agent_id: homeassistant
          language: en
          text: '{{trigger.slots.command2}}'
  mode: parallel
  max: 100
- id: '1690881654351'
  alias: "Assist - \U0001F4E3 Cast Dall-E Image"
  description: ''
  use_blueprint:
    path: perso/cast_dall_e.yaml
    input:
      assist_command: Affiche sur la télé une image (de |d'){prompt}
      open_ai_config_entry: fcd62e0ff1d58319b899d424dd59a3ec
      media_player: media_player.tv_cast
